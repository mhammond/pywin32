A changelog for recent builds as pasted into the sourceforge page.

Generally created by hand after running:
   hg log -rb2xx: > log.out
However contributors are encouraged to add their own entries for their work.

Since build 224:
----------------
* PythonWin is now able to start with non-English active keyboard layout.

Since build 223:
----------------
* Built with a released version of Python 3.7, which fixes various date related
  issues with Python 3.7

* Fix a regression introduced in build 220 around how some COM properties are
  handled (#1211 and #1199)

* Everything is now build with the Windows 8.1 SDK. While this should typically
  be invisible, it is mentioned because it might explain obscure issues that
  creep in, so it should be explicitly called out as a change.
  On the plus side, this makes building the extensions far simpler.

* win32serviceutil - in GetServiceClassString, skip rewrite of file name (fname)
  when win32api.FindFiles returns an empty list, e.g., if the service has been
  packaged in a zip or exe. (fixes issue #642)

Since build 222:
----------------
* pywin32.pth now arranges for the pywin32_system32 directory to be on
  PATH to help with pypi installations (thanks to @xovian via #1153)

Since build 221:
----------------
* !! Moved to github for development !!. https://github.com/mhammond/pywin32
  is the new home of pywin32 and all builds will be released there.
  The build process now also builds "wheels", so "pip install pywin32" should
  also work (but see README.md for some limitiations of using pip)

  Particular thanks to @xoviat, who helped with prompting me to make the
  change, imported all the issues from sourceforge, and helped with the
  process for creating the wheels.

  As a part of this, I've changed every issue in this file from "#xxx" to
  "#sfxxx" to indicate they refer to the old sourceforge issue numbers.

* Older Python versions are no longer supported - builds are only made
  available for Python 2.7 and Python 3.5+.

* For Python 3.x, a win32 FILETIME or TimeStamp which is greater than the
  datetime module can handle will return datetime.datetime.max instead of
  throwing (fixes issue #748)

* win32file - fix ERROR_BAD_LENGTH in GetFileInformationByHandleEx
  in x86 builds(issue #752, rbschk)

* MakeModuleForTypelib no longer catches COM exceptions, so no longer can
  return None. This is what the docstring always claimed the behaviour was
  and makes things less error prone. If you explicitly call this function and
  handle None, you will need to wrap the call in an exception handler.

* Change PyIMAPIFolder CopyMessages, DeleteMessages, and EmptyFolder to return
  the HRESULT (Nick Czeczulin via patch #sf162)

* Fix a reference leak of Py_None in a couple of MAPI methods (Nick Czeczulin
  via patch #sf149)

Since build 220:
----------------
* Add PyIMapiSession::AdminServices method (Nick Czeczulin via patch #sf161)

* Allow win32com.client.CastTo() to have a typelib specified, which will be
  used to locate the object definition (Pieter Aarnoutse via patch #sf136)

* Add pythoncom.StgOpenStorageOnILockBytes (Nick Czeczulin via patch #sf135)

* IDispatch failures will try and get error information via IErrorInfo (Stefan
  Schukat via patch #sf130)

* A null SPropTagArray will now return None instead of crashing.

* New mapi/exchange interfaces PyIExchangeManageStoreEx, PyIMAPIAdviseSink,
 PyIMsgStore::Advise, PyIMsgStore::Unadvise, HrAllocAdviseSink,
 HrThisThreadAdviseSink, and HrDispatchNotifications (Nick Czeczulin)

Since build 219:
----------------
* win32com - sys.argv[0] may be set to a bytes object instead of a string on
  Python 3 when implementing an in-process COM object.

* Fix that allows a property to be fetched on COM objects to work in more cases
  (Fredrik Orderud via patch #sf155)

* Disabled exchange and exchdapi modules on Python 2.5 due to unresolved
  build issues.

* Fix potential crash in SHGetIDListFromObject and SHGetFileInfo issues (rupole)

* Allow GetShortPathName to handle long paths in unicode mode (ruple)

* Fix intermittent crash in win32cred.CredRead() (bug #sf670, rupole)

* Support PT_MV_BINARY MAPI properties, (patch #sf37) and many other MAPI
  improvements (Nick Czeczulin)

* Fix username used with EvtOpenSession (bug #sf688, rupole)

* Fix OutputDebugString encoding in wide builds (patch #sf142, rupole)

Since build 218:
----------------
 * win32com.mapi
   Addded outlook interface IConverterSession with methods MIMEToMAPI, MAPIToMIMEStm, and SetAdrBook
   Added method OpenStreamOnFile (Nick Czeczulin)
   Ignore PT_MV_TSTRING along with PT_TSTRING (Nick Czeczulin) 
   Bugfix to support PT_MV_BINARY properties (Nick Czeczulin via patch #sf37) 

 * Conversions from a Python object to a variant now does a better job at
   deciding what variant type to use, taking into account the size and sign of
   the value (Stefan Schukat via patch #sf127)

 * Add support for VT_I8 and VT_UI8 when converting a variant into a Python
   object (Stefan Schukat via patch #sf128)

 * win32com.mapi.exchange
   Added 64-bit support by excluding the 32-bit Ex2kSdk.lib functions from 64-bit builds.
   Unfortunately, this means that only IExchangeManageStore::CreateStoreEntryID
   is currently available in a 64-bit build. (Nick Czeczulin)

* adodbapi updated to version 2.6 -- new examples folder includes short programs for
    reading and writing .xls spreadsheets and reading ACCESS .mdb files using SQL.
  New functions .is64bit.Python() and .is64bit.os() to help pick the correct drivers.
  New function .schema_table.names() returns a list of all tables in a database.
  Ability for a Windows computer to be a database proxy for a remote (Linux or Windows) unit.
    see adodbapi/README.txt for more information.

* Fix issue implementing COM objects from within a virtualenv (Kevin Smyth 
  via issue #3597965)

* Fix some issues using decimal objects with Python 3.3 and later (rupole)

* Add a counterpart to VB's Nothing, from patch 3609027 by Stefan Schukat

* win32api
    Handle REG_QWORD (64-bit ints) (rupole)
    Add GetEnvironmentVariableW and SetEnvironmentVariableW (rupole)
    Fix function pointer check for win32api.GetNativeSystemInfo (bug#sf665)

* win32com.shell
	Add interfaces IFileOperation and IFileOperationProgressSink
    Add SHParseDisplayName (feature req #3585998) (rupole)

* win32com.propsys
	Add interfaces IPropertyChange, IPropertyChangeArray, and IObjectWithPropertyKey
	Add functions PSCreateSimplePropertyChange, PSCreatePropertyChangeArray, and SHSetDefaultProperties

* win32crypt
	Add functions and objects for handling certificates and certificate stores

* win32gui
	Add RegisterHotKey (rupole)

* win32evtlog
	Add several more Evt* functions (Vista+ event log API)

* win32prociess
  Add EnumProcessModulesEx (feature request 3608155) (rupole)

* pythonwin
  Fix a hang using the tools menu

Since build 217:
----------------
* mapiutil.py GetPropTagName has been modified to return the fully qualified
  PT_UNICODE and PT_STRING8 type name. Added optional argument to override
  rawType default in GetMapiTypeName. (Nick Czeczulin)

* Fix the count of replaced terms in Pythonwin's search/replace (rupole).

* Fix obscure issues in the Pythonwin code browser and other uses of the 
  "hierlist" widget (rupole).

* Fix a crash using a COM "record" that holds an array (rupole).

* Fix error return in win32gui.GetClassName (rupole).

* Some misc fixed to win32timezone (Jason R. Coombs).

* Some fixes to win32com gencache for Python 3.x (Tim Golden)

* Fix ActiveScript exception hresults.

* RegQueryValueEx now return an empty list for blank REG_MULTI_SZ
  (rupole via bug #3531456)

* Add win32pdh.AddEnglishCounter (rupole via feature request #3529527)

* Fix post_install script use of the registry (rupole via bug #3536122)

* Python 3.3 version is built with VS2010.

* win32com.shell - added function SHCreateStreamOnFileEx and
	interfaces IShellItem2, IEnumShellItems, IApplicationDocumentLists,
	IApplicationDestinations, ITaskbarList, IEnumObjects,
	IKnownFolder, IKnownFolderManager, IObjectArray, IObjectCollection,
	ICustomDestinationList, and IShellLibrary; enhance SHAddToRecentDocs.

* win32com.propsys - Many Property System interfaces and functions added

* pythoncom - added StgCreateStorageEx

* win32com.client - 
	Fix iteration of objects that don't declare an enumerator in their typelib
	Validate syntax of constants written to makepy generated files

* win32file - Add GetFileInformationByHandleEx, ReOpenFile and OpenFileById,
  SetFileInformationByHandle.  SetFileTime() has an extra param to allow UTC 
  time to be specified.

* win32api - Allow UpdateResource to remove a resource

Since build 216:
----------------
* ISAPI extension works with Python 3.x

* Python service module will now have their directory added to the start
  of sys.path rather than the end to avoid cryptic error messages if a
  module of the same name is already on the path (rvolpe via #3194663)

* Various Pythonwin autocomplete enhancements (kxroberto via #3468282 and
  Oliver Tengler via #3433953)

* The Pythonwin editor now remembers previous searches made in this session.
  (patch #3468280 from kxroberto).
  
* The LOGFONT struct implementation (win32util) was extended to support the
  full LOGFONT struct as published by Microsoft.  This includes changes to
  win32util.LogFontToDict and win32util.DictToLogFont.  (Feature request
  3433757 by Kris Hardy)

* Remove some duplicated menu code from pythonwin which should avoid
  having py2exe pulling in most of the pythonwin framework in some cases
  (patch 3433527 from kxroberto.)

* A new win32com.client.VARIANT object can be used for advanced control over
  the parameter types passed to some COM methods.  See the documentation in
  win32com/HTML/variant.html (also included in the help file)

* The win32com.adsi and win32com.mapi packages have been upgraded to work on
  Python 3.x and as a result, there is a slight risk that regressions to
  these packages have been introduced in the Python 2.x versions.  Please
  file a bug if any problems are found.

* Pythonwin now warns, but allows you to continue, when saving a file with
  an invalid encoding line (bug 3139486)

* Fix win32com.client.WithEvents on py3k (bug 3199843)

* When passing integers/unsigned integers to COM objects which did not fit 
  into 32bits, OverflowErrors were silently discarded and -1 was silently 
  passed.  This has been fixed for signed integers (an OverflowError is now 
  raised) and unsigned integers now allow for values with the high-bit set to 
  be passed correctly.

* Fix win32com.client.WithEvents() on py3k.

* makepy may have generated syntax errors if 'helpstring' elements in typelibs
  had strange quoting or slashes (bug 3199631)

* Fixed that in some cases win32file.GetOpenFileName and GetSaveFileName 
  could have returned trailing garbage after an embedded NULL character.
  (bug 3277647)

* Some functions which accepted a DWORD did not accept long integers which
  fit in 32bits with the most signficant bit set (eg, 0x80000000).

* Source-code management moved from CVS to Mercurual.

* win32com.shell - Added SHCreateShellItem and fixed some 64bit issues.

* win32evtlog - Added some of the new event log functions introduced in 
  Vista/Windows 7

* win32service - Added EnumServicesStatusEx, and support startup type 
  "delayed" for Python services

* win32net - Fix a problem with NetFileEnum on 64-bit (bug #3376041)

Since build 215:
----------------
* New loader module for COM objects to avoid some CRT manifest issues.
  pythoncomloaderxx.dll will be copied to your System32 directory and used as
  the entry-point for COM objects instead of pythoncomxx.dll.  This DLL
  is very small - includes a manifest referencing the C runtime library and
  simply loads pythoncomxx.dll and deletes the COM object creation back to it.
  You will need to re-register any COM objects you have to take advantage of
  this.

* Performance Monitor and ISAPI DLLs now include a manifest to fix potential
  CRT related issues using those features.

* Fix potential crash in ISAPI GetServerVariable functions.

* Fix printing on pythonwin on 3.x

* Pythonwin gets an option to set the background color of the selected text.


Since build 214:
----------------
* Update adodbapi to version 2.4,2 -- in this version,
  1. The cursor has a new .query attribute.  It returns the (possibly converted) query sent to ADO. [Thanks to William Dode.]
     This may be useful for testing paramstyle 'format' and 'named' queries.  .query is an extension borrowed from psycopg2.
  2. Added .command and .parameters attributes, which are copies of the original command and parameters sent the the cursor.
  3. Added tests using a PostgreSQL server.  Tests are now run for ACCESS, MS SQL, MySQL and PostgreSQL.
  4. Column name data access is now case insignificant (since PostgreSQL returns lower case column names).
      so (if a row object 'r' contains a first column 'spam') r[0], r.Spam, r.spam and r['SPAM'] are all equivalent.
  5. The connection has new attributes .dbms_name and .dbms_version to display the underlying database engine. (like mxODBC)

* Update adodbapi to version 2.4.0 -- in this version,
   "fetchall()" and "fetchmany()" return an SQLrows object 
   ...which emulates a sequence of SQLrow objects.
   "fetchone()" or the cursor's "next()" method return an SQLrow object.
   An SQLrow object emulates a tuple of data fields.
   An SQLrow object also appears to have an attribute for each column of data.
   therefore...
   >>> import adodbapi
   >>> myConnection = adodbapi.connection('someDSN')
   >>> cur = myConnection.cursor()
   >>> cur.execute("select name, rank, serialNumber from soldiers")
   >>> row = cur.fetchone()
   >>> assert row[0] == row['name']
   >>> assert row[1] == row.rank
   >>> rows = cur.fecthall()
   >>> assert rows[4,'serialNumber'] == rows[4][2]

* Update adodbapi to version 2.3.0 -- this is includes major refactoring and
   specifically adds features for django support, including the ability for the
   programmer to change ado's SQL "paramstyle" at run time to select between
   'qmark', 'format' and 'named' methods of passing SQL parameters.
** also, in response to user requests, adodbapi will now use client-side
   cursors by default.  This will make rowcount and stored procedure return 
   parameter values more readily available.
 
* Remove manifest for Python 2.6 and later binaries which should make things
  work much better when the VS2008 redist components aren't installed.

* Fix problem causing ASP pages to fail when reloaded.

* mapiutil.py functions GetMapiTypeName and GetPropTagName have been modified
  to better distinguish between PT_UNICODE and PT_STRING8 type names
  during reverse lookups. (Nick Czeczulin)

* Fix encoding problem in makepy (Massa, Harald Armin)

* Pythonwin: trim leading and trailing whitespace in calltip text (kxroberto)

* Pythonwin: fix reload of package modules and support for 'pyw' and 'pyx' 
  extensions (kxroberto)

* Pythonwin: PYTHONSTARTUP is honoured, just like when using python.exe
  (kxroberto)

* Pythonwin: Better support for international keyboards.  (Bug 896502 and
  help from kxroberto)

* New win32api functions GetKeyboardLayoutName, MapVirtualKey and ToAsciiEx

* Add win32file.WSAEnumNetworkEvents (Ziga Seilnacht via patch 3022832)

* Get vtable interfaces working on 64bit windows (Nikolay Igotti via patch 
  3002383)

* Pythonwin: if the interactive window is cleared, avoid the blue color and 
  large font on the new line (markt via patch 2813056)

* Fix Python reference leak when calling MAPI/Exchange functions which
  take an SRowSet param.

* Fix Pythonwin's Edit/Replace dialog in Python 2.3 (bug 2962078)

* Fix a few axscript issues with py3k.

* Pythonwin now offers to create the file when attempting to open a file
  that doesn't exist (ghazel via bug 1409321)

* Many functions in win32event would swallow exceptions due to things like
  invalid handles etc (Ziga Seilnacht via issue 3136751)

Since build 213:
----------------

* pythoncom gets better support for 64bit integers, including in arrays.

* pythoncom may fail to import on Windows 2000 installs with a default IE
  (Roger)

* Fix Pythonwin when backspacing over an extended character (from markt
 (metolone), via bug 2618277)

* Fixed a regression which would cause an error if you compared a PyTime 
  object to any other type, including None

Since build 212:
----------------

* py3k work - see the notes in the main documentation index for details,
  but this entailed a huge overhaul of almost all the pywin32 sources.
  Many things have been modernized for the first time in over a decade,
  and may new tests have been added.  As a result, build 213 will not
  be recommended for production work and should be treated as beta quality.

  Huge thanks to:
  - Roger Upole: for starting the py3k work, and without whom the py3k work
    would literally not yet have started.
  - Jason R. Coombs: for help porting win32timezone to py3k and for helping
    with the new datetime object support.
  - Vernon Cole: for help with porting adodbapi to py3k.

* win32eventlog.OpenEventLog and OpenBackupEventLog now return a PyHANDLE
  object which auto-closes on destruction.

* pythoncom servers which implemented 'universal' vtable interfaces from a
  typelib could cause Data Execution Protection (DEP) to be triggered if
  enabled.  This has been resolved and such servers now work correctly with
  DEP enabled.
  
* Fixed memory leak in win32wnet.WNetEnumResource.

* Added win32wnet.WNetAddConnection3 allowing a HWND to be specified for
  authentication.

* isapi:
  * Refactored isapi.install primarily to support installing extensions into 
    the root of a site (Jason R. Coombs)
  * New IIS6-only functionality HSE_REQ_EXEC_URL which avoids the need to use
    a filter in most cases, including new demos for this.
  * Other misc support functions (HSE_REQ_REPORT_UNHEALTHY, 
    HSE_REQ_GET_ANONYMOUS_TOKEN, etc)

* "Modernization" changes, instigated by py3k:

  - Many older modules now accept unicode arguments where previously they
    only accepted strings - notably, win32ui, win32wnet ...

  - win32wnet: NCB and NETRESOURCE attributes are now types rather than
    methods.  NETRESOURCE string attributes may return None if the win32
    structure has a NULL pointer (previously an empty string was returned)

* Added win32inet.WinHttpGetDefaultProxyConfiguration()

* Pythonwin updates from R�mi Paucher; enter completes auto-complete in
  the editor and interactive windows, auto-complete should now work on French
  keyboards.  (XXX - some of this was reverted - update!)

* Lots of work to better support unicode, py3k and 64bits from Roger.
  Most of these changes will be invisible, and those that are not
  are detailed elsewhere.

* ODBC module - todo - add more about this.

* pythoncom.__future_currency__ is no longer supported - the decimal
  module is now used unconditionally when returning 'currency' variants.
  See the win32com readme for more.

* If you *implement* (not use) any of the following interfaces, take note:
  IErrorLog, IPropertyBag, ICatInformation and IStorage have been upgraded 
  to have unicode passed instead of strings as args to the implementation
  methods.

* win32gui: RegisterDeviceNotification and EnumPropsExW didn't release the 
  GIL, which could cause a deadlock in multi-threaded Python apps.

* Fix bug in win32timezone.GetSortedTimeZoneNames() on WinNT.

* win32com.internet gets support for IDocHostUIHandler, IHTMLOMWindowServices
  and IInternetSecurityManager interfaces, and CoInternetCreateSecurityManager
  function.

* win32com.axcontrol gets support for IOleControlSite, 
  IOleInPlaceActiveObject, IOleInPlaceFrame and IOleInPlaceUIWindow 
  interfaces, and OleTranslateAccelerator function.

* MsgWaitForMultipleObjectsEx() would crash in all cases.  Fix from 
  Ziga Seilnacht via [2141368].

* pywintypes.error and com_error get support for attributes as
  well as indexing (ie, exc.winerror can now be used in place of exc[0].)
  See the help file for details on the attribute names.

* MAPI gets support for IMAPIAdviseSink

* win32com.shell gets support for IContextMenu2 and IContextMenu3

* add win32api.GetNativeSystemInfo(), win32api.GetKeyboardLayout(),
  win32api.GetPwrCapabilities.

* add win32file.ConnectEx() and win32file.TransmitFile() (ionel and Roger via
  [1962146])

Since build 211:
----------------
* adodbapi updated to version 2.2. Supports Iron Python. Better
  logic for .rowcount. New .cvtString convertion method. Multiple
  result sets work correctly. Code cleanup and eliminate classic
  classes and string exceptions. Fix CoInitialize bug.

* Remove warning about VARDESCs in obscure circumstances when using
  COM objects.

* Add winapi.SetSystemPowerState(), win32pipe.TransactNamedPipe(),
  win32net.NetValidatePasswordPolicy(), 

* win32api.GetConsoleTitle() could raise win32api.error with an error
  code of 0 when the title was > 64 characters.  It now returns the
  full title.

* New IExplorerPaneVisibility interface, minor shell bugfixes.

* Fix a couple of makepy related unicode issues, and generate to
  a .temp file so an error doesn't leave a 1/2 generated module.

* Fix so makepy works in IDLE in non-English locales.

* Pythonwin changes from Roger:
  - Right-click menu gets "Copy code without prompts" and "Execute 
    code from clipboard" options.
  - If text is selected when period key is pressed, replace text
    instead of doing autocomplete
  - Add a keyboard shortcut to fold up second level indents
  - Allow keypad keys to perform original function when folding 
    is disabled (feature req 1798328)

* Add some extra service configuration parameters introduced with Vista


Since build 210:
----------------
* Support for RegisterDeviceNotification in win32gui and for packing and
  unpacking the various structures in win32gui_struct.  Demos in 
  win32\Demos\win32gui_devicenotify.py and service\serviceEvents.py

* adodbapi added to pywin32 package CVS tree:
- this pure python package is a fully dbapi 2.0 compliant database access
  method. This is a copy of the code from the adodbapi sourceforge project,
  which will eventually become obsolete in favor of this site. Inclusion here
  and maintenance of the package are by Vernon Cole.

* Available for AMD64 versions of Windows for Python 2.6 and later (support
  for Python 2.5 is just too hard, sorry).  Lots of help from Roger, 
  Steve Yin and Sidnei da Silva.

* com related changes:

- win32com.bits: Sidnei da Silva from Enfold Systems added support for
  BITS (Background Intelligent Transfer Service). Not fully complete
  (missing Ranges-related APIs and a couple others) but the basic
  functionality is in place. See the demos in
  win32comext/bits/test/*.py

- makepy accepts a program id to process its typelib and generates long 
  integer literals for constants > sys.maxint.  The way typelibs are generated
  also changes slightly, fixing a bug with certain hex version numbers in 
  the registry.  Fix a bug [1548903] that could cause incomplete generated 
  files when a typelib was missing

- win32com.client: Fix a bug [1587023] that prevented Get and Set properties
  working for ITypeComp implementing objects.  Add automatic "cast" to an
  interface when using iterators [1707700]

- win32com.axcontrol: Module for using ActiveX controls independently of
  pythonwin/win32ui/MFC.  Includes a demo of embedding Internet Explorer 
  inside a win32gui window.

- win32com.internet:
  * Add CoInternetIsFeatureEnabled and CoInternetSetFeatureEnabled

- pythoncom:
  * event handlers implemented in Python that were called with named params 
    may have presented the arguments to Python in the incorrect order - this 
    has been fixed.  
  * Always return -1 (VARIANT_TRUE), rather than 1, when a VARIANT_BOOL is 
    requested.
  * When passing a Python integer, always use VT_I4 when possible, VT_UI4 
    otherwise (previous versions did VT_I4 only, 209 did VT_UI4 only)
  * New functions CoMarshalInterface, CoUnmarshalInterface, 
    CoReleaseMarshalData, ReadClassStm, WriteClassStm, CreateStreamOnHGlobal,
    CreateILockBytesOnHGlobal.
  * Fix possible buffer overflow using IStream.

- win32com.shell:
  * PyIExtractImage by Steven James.
  * PyIEmptyVolumecache, IEmptyVolumeCache2, IEmptyVolumeCacheCallBack by 
    Sidnei da Silva from Enfold Systems.
  * IsUserAnAdmin
  * More coverage of the shell interfaces and demos, including many Vista 
    specific functions and interfaces (see win32comext\shell\demos)

* win32transaction: New module containing Kernel Transaction Manager (KTM) 
  functions as used with transacted NTFS and transacted registry functions

* win32api:
  - Transacted registry functions and demos from Roger
  - New functions RegCopyTree, RegDeleteTree, RegSaveKeyEx, 
    RegRestoreKey, RegCreateKeyEx, RegQueryInfoKeyW, 
    RegEnumKeyExW, Get/SetSystemFileCacheSize, GlobalMemoryStatus,
    GlobalMemoryStatusEx, GetDllDirectory, SetDllDirectory,
    RegDeleteKeyEx, RegOpenCurrentUser, RegOverridePredefKey

  - Fix memory leak in GetShortPathName
  - Fix VkKeyScan arg handling

* win32file:
  - Fixed bug in ReadDirectoryChanges that ignored 1 char filenames.
    (from Niki Spahiev)
    Added Transactional NTFS functions, CreateSymbolicLink and other new 
    Vista API functions, System file checker (Sfc) functions, 
    DuplicateEncryptionInfoFile, GetVolumePathNamesForVolumeName, 
    GetFinalPathNameByHandle,
    CreateMailslot, GetMailslotInfo, SetMailslotInfo

  - FindFiles and FindFilesIterator now accept an optional transaction handle
    to perform a transacted search
  - FindStreams function that calls FindFirstStream and FindNextStream to 
    enumerate a file's data streams.
  - FindFileNames using FindFirstFileName, FindFirstFileNameTransacted, and FindNextFileName

* win32service:
  - Service and service control manager handles are now returned as 
    self-closing PySC_HANDLEs instead of plain int handles
  - Service dependencies are returned as list of Unicode strings instead
    of a single string, which lost multiple dependencies (could break
    code, but old handling was insane)
  - Allow for services to handle additional events and the data that comes
    with them - see win32\demos\service\serviceEvents.py.

* win32gui:
  - GDI object handles (bitmaps, fonts, regions, pens, brushes) are returned
    as another PyHANDLE subclass (PyGdiHandle)
  - A large number of new text drawing, line and curve drawing, region, path,
    and coordinate space functions
  - Window class name can now be used interchangeably with class atom
    (fixes bug #1267366)
  - Add DrawTextW (feature request #1173716), PtInRect, EnumPropsEx,
    DrawTextW, SetMenuInfo, GetMenuInfo, ExtCreatePen, CreateBrushIndirect,
    lots of other GDI functions.

* win32pipe:
    Add GetNamedPipeClientSessionId, GetNamedPipeServerSessionId, 
    GetNamedPipeInfo, GetNamedPipeClientProcessId, GetNamedPipeServerProcessId

* win32process:
    New functions Get/SetThreadPriorityBoost, Get/SetProcessPriorityBoost,
    GetGuiResources, GetProcessId, IsWow64Process

* win32print:
  - Printer handles are now returned as self-closing PyHANDLE subclass
  - FlushPrinter, GetDefaultPrinterW, and SetDefaultPrinterW

* win32security:
  - Added DuplicateTokenEx, AddMandatoryAce, IsTokenRestricted, LogonUserEx
  - GetTokenInformation and SetTokenInformation support new Vista 
    information classes

* win32trace works better on Vista

* mmapfile:
  - Fix crash caused by reopening named mapping with excess size
  - Accept offset and view size parameters, enabling use of files larger
    than physical memory
  - Document use in help file, and a demo script

* win32timezone: support Vista and 2007 timezones.

* pythonwin:
  - Refcounting / GIL problems fixed by kxroberto.
  - Background pychecker plugin by kxroberto
  - Fix COM browser
  - Problems calling SetWindowPost on an ActiveX control.
  - Upgrade to scintilla 1.75
  - Fix problems locating the Python DLL at startup.

* isapi:
  - Handle server variables > 8k in length and also handle IIS6 'UNICODE_'
    variables.
  - TransmitFile, MapURLToPath, IsKeepConn, DisableNotifications
  - New FilterContext attribute can be used to store arbitrary Python
    objects in an ECB.
  - Filter and Extension errors that happen during initialization are
    written to the Windows Event Log to help diagnose them.  A couple
    of potential deadlocks during init errors also fixed.

* win32pipe:
	GetNamedPipeClientProcessId
	GetNamedPipeServerProcessId
	GetNamedPipeClientSessionId
	GetNamedPipeServerSessionId
	GetNamedPipeInfo

Build 210 - Sept. 23 2006
-------------------------
* Roger created win32profile module for working with user profiles
* Roger created win32cred module - interface to credentials management
* Roger added win32file functions for backing up and restoring encrypted files
* Add win32api.GetModuleFileNameW(), SetEnvironmentVariable()
* win32file.AcceptEx now indicates if the function was successful.
* OVERLAPPED objects are now hashable [ 1408485 ]
* Roger added win32file.ReplaceFile, CopyFileEx and MoveFileWithProgress
* Added win32uiole.AfxOleInit, SetMessagePendingDelay, 
  EnableNotRespondingDialog and EnableBusyDialog.
* win32net gets support for USER_INFO_4 structures
* Roger changes win32file.MoveFileEx to accept NULL for destination, added 
  SetFileShortName
* Missing typelibs could cause incomplete gen_py cache file [ 1548903 ]
* DISPIDs would sometime be incorrect when multiple typelibs used [ 1457673 ]
* ISAPI filters get support for HTTP_FILTER_AUTHENT and HTTP_FILTER_RAW_DATA
* Prevent ISAPI filters and extensions getting "\\?\c:\" style filenames.
* win32com.shell.shell fixes bug in FILEDESCRIPTORW packing, gets a few
  unicode related additions.
* Fix memory leak when passing datetime() objects to COM functions.

Build 209
---------
* Roger Upole added IEnumString, IShellLinkDataList, IUniformResourceLocator
  and IActiveDesktop interfaces, win32gui.GetDlgItemText/GetDlgItemInt, 
  win32process.AttachThreadInput, win32api.Get/SetHandleInformation, amongst
  others
* Roger added a new win32ts module, wrapping Terminal Service functions
* Roger enhanced/fixed win32api.GetLongPathName, PyIBindCtx, 
  win32gui.SystemParametersInfo/SetLayeredWindowAttributes/
  GetLayeredWindowAttributes, win32net.WNetGetResourceParent, various 
  win32job methods, shell.SHFileOperation and added many monitor and display 
  related functions.
* Stefan Rank and Roger enhanced DEVMODE support
* Add asynch (overlapped) support for ReadDirectoryChangesW
* Prevent warnings in later Python 2.5 releases.
* Makepy now generates working code when a method etc is named 'None'
* isapi package now handles site names with extended characters.
* Fix unwanted string value padding by using SQL_VARCHAR instead of SQL_CHAR
  in ODBC module.
* Allow extended chars in comments in IE/ASP and other AXScript applications.
* win32api.GetShortPathName now handled unicode (callingGetShortPathNameW)
* When passing large integers via win32com, we now attempt to pass as a 64 
  bit integer before falling back to a float.
* Added win32process.CreateRemoteThread, win32gui.ExtTextOut/SetBkColor/
  DrawAnimatedRects, win32api.SetLastError
* Fix return code from ConnectNamedPipe when the function succeeds.
* win32gui_menu demo shows how to do owner-draw menus.
* set_file_audit demo shows ACL inheritance.
* win32gui is no longer 'split' in the help file.
* Fix errors if a timer callback or win32ui Window handler removed themselves.
* Fix memory leaks related to win32ui.CreateWnd

Build 208
---------
* pywintypes: fix reference leak in PyOVERLAPPED objects.
* isapi: fix memory leak; filter "load order" handling; error
  rendering.
* pythonwin: Disable some old DDE hacks to prevent Data Execution Prevention 
  (DEP) errors in Pythonwin.
* odbc: gets support for Unicode, corrects support for BIT, and 
  SQLDataSources() method.
* win32job: New win32job module for access to the win32 "job" functions
* win32inet: Add WinHttpGetIEProxyConfigForCurrentUser()
* pythoncom.Empty now does what it implies - passes a variant with VT_EMPTY.
  New pythoncom.ArgNotFound supports the old behaviour (of VT_ERROR with
  DISP_E_PARAMNOTFOUND); CoInitializeEx change described in Build 206 was 
  not implemented - now it is!
* win32com: large unsigned ints may previously have been returned as negative
  Python integers; makepy no longer displays a GUI progress dialog by default.
* win32com.authorization: New package from Roger Upole.
* win32com.mapi: New IProviderAdmin support from John Nielsen; add
  IMAPIStatus support
* win32com.shell: Allow SHFileOperation to accept a string containing 
  multiple file names, prevent Windows handle leak in IQueryAssociations.
* win32com.adsi: Always return extended error info when available, and expose
  ADsGetLastError explicitly.
* Leonard Ritter and Robert F�rtsch contributed some IE extension samples
  (see win32com\demos)
* .chm documentation now includes a link to search MSDN and google for many 
  API functions
* Many other minor fixes and enhancements.

Build 207
--------
* Fix an error in win32gui.CreateDC() arg handling, introduced with the
  Windows CE changes in build 206.

Build 206
--------
* Prevent the "display name" of a COM object ever being Unicode and
  therefore a possible cause of unexpected Unicode decode errors.
* Correct and document behaviour of CoInitializeEx/CoInitialize exception 
  throwing behaviour - previously a failure would leave a stale Python 
  exception.
* Fix memory leak when doing str(PySID) (Roger Upole)
* New IE Toolbar demo contributed by Leonard Ritter, plus a few new
  AXControl related interfaces that were necessary.
* win32timezone now works in non-English Windows versions.  timezone
  objects can now be pickled (Jason Coombs)
* Prevent stale Windows errors causing win32api.GetConsoleTitle() to fail.
* Remove workaround for Python bug so we again write a file encoding to 
  makepy generated files in all Python versions.
* New win32gui function CreateIconFromResource.
* Add win32file.QueryDosDevice (Roger Upole)
* Fix error when using win32pipe in a "bundled" py2exe app.
* Better support for py2exe based services, including debugging support.
* Add support for all VARIANT types in COM arrays (a few were missing)
* GetBitmapBits() can return a string or a list (a string being *much* 
  faster)
* Fix win32gui taskbar demo to handle the fact explorer may not (yet) be 
  running.
* win32 directory should again build on Windows CE (Luke Dunstan)
* Support for IGlobalInterfaceTable (Stefan Schukat)
* A number of pythonwin framework enhancements (Adal Chiriliuc)
* Better Auto-Complete list in pythonwin for COM objects (Jerry Gamache)
* win32api.GetVersionEx takes an optional param - if 1, we return a longer 
  tuple representing the OSVERSIONINFOEX structure.

Build 205
---------
* Introduce support for Python's 'decimal' module when working with
  COM 'currency' objects - see the included .chm for more details.
* More reliable loading of pywintypes/pythoncom when these files are not in 
  system32
* Allow datetime objects to be passed directly to COM functions without 
  requiring explicit conversion.
* New win32crypt module for access to the windows crypto functions.
* New win32console module (Roger Upole)
* New win32com.shell.shell methods and leaks fixed, new win32gui methods
  (Roger Upole)
* pywin32.version.txt file installed, and all .dll, .pyd and .exe files
  are stamped with the pywin32 version number.
* Number of build related changes to work with the latest Platform SDK.
* Fix reference leaks when using OVERLAPPED objects with completion ports.
* win32api.GetConsoleTitle() now returns an empty string instead of
  (0, "No Error")
* makepy didn't catch all Dispatchable interfaces, and now doesn't die
  if a dependent typelib can not be loaded.
* win32com 'universal gateway' support did not handle byref args correctly.
* Fix [ 1208530 ] PyBitmap.GetBitmapBits Memory Leak
* [ 1208081 ] Fix: WaitForServiceStatus doesn't work for remote boxes
* Pythonwin patch from Matthias Haldimann: if there is a selection, use 
  that as the default search string.
* Lots of win32com.adsi enhancements.
* Tweaks to the new isapi support.
* Many other minor fixes and enhancements - see the CVS log for more
  details

Build 204
---------
ChangeLog:
* New 'sspi' functions from Roger Upole which allow you to perform NTLM and
  Kerberos authentication.
* DirectSound interface contributed by Lars Immisch.
* New winxptheme module wrapping the Windows XP theme API.
* Fix bug in commctrl.py which caused many notification message values to have
  an incorrect value.  See the release notes for more information.
* Functions that returned HWND, HDC or other similar objects would raise an
  exception with "no error" whenever a handle of 0 was returned. We now only
  raise an exception when a real win32 error happens, and simply return the zero
  handle otherwise.
* More new win32gui functions (as usual!)
* ActiveDebugging enhancements from Kiriakos Vlahos.
* Python services will no longer have %System32% as the CWD when they start
  (the directory of the hosting exectutable will be used instead).  This should
  prevent ImportError due to DLLs in that System32 directory being found for
  Python imports.
* Services can specify a description that appears in win2k and later 'services'
  UI.
* All event log entries written by services report the "source" as the service
  name (previously it was always "Python Service")
* win32/scripts/verstamp.py is now useful stand-alone.
* Fix error that would cause Pythonwin to fill the registry with thousands
  of toolbar related entries.
* Correct error shutting down Pythonwin in Python 2.4
* DispatchWithEvents would always regenerate makepy module
* Fix memory leaks in the new ifilter module.
* ISAPI extension works correctly with IIS6
* win32print fixes and enhancements from Roger.
* Yet more corrections for Windows NT.

Release Notes:
This is a new build of the Python for Windows extensions.  Important notes:

* If you have implemented a GUI application which uses Common Controls, and you
  handle notification messages for these controls, a bug recently fixed in
  commctrl may impact you. Key constants in commctrl.py (eg, NM_DBLCLK) had
  incorrect values which are now correct. If your own code references these
  constants, you may be working around this bug and your code will need review.

  If your WM_NOTIFY handling code previously has something like:
     code += 0x4f0000
  You should change it to:
     code += commtrl.PY_OU
  Which will work in all pywin32 versions.  The adjustment can be removed
  if you want to work only with build 204 or later (as PY_OU is correctly
  zero in that version).  Alternatively, look at using
  win32gui_struct.UnpackWMNOTIFY()
  
  I apologize for this, but keeping incorrect constant values in commctrl.py
  would be the wrong thing to do.

* Files generated by makepy in Python 2.4 will not declare an encoding.  This
  is to work around Python bug http://www.python.org/sf/1163244.  If you use
  COM objects that use extended characters, a warning will be generated.

See the change log for minor changes.

Build 203
---------
* Phil Frantz contributed the start of an ISAPI framework - you can
  now implement ISAPI filters and extensions in Python! (only for
  Python 2.3 and later builds).  See the installed Help file, or
  see the site-packages\isapi\samples directory.
* Roger Upole fixed a number of security bugs, and allowed the security
  modules to again be used on NT.
* David Bolen restored service functionality for Windows NT.
* The win32gui, win32security, and win32service modules all again work
  on Windows NT.
* Roger Upole continued to enhance win32print.
* The command-line args for our service module now allow 'start' and 'stop'
  to specify a '--wait' option - this will prevent the program terminating
  until the service completely starts/stops.
* Support for CreateTypeLib2 contributed by Phil Rittenhouse.
* COM servers which specify a typelib to load now also provide this
  type-info to the caller via GetTypeInfo.
* win32api.GetLongPathName() support unicode filenames longer than MAXPATH
* win32gui gets lots of new functions.
* New 'winxpgui' module - almost identical to win32gui, but has a
  Windows XP manifest included, and a couple of extra functions not
  supported by Windows NT (AnimateWindow, FlashWindowEx, etc)
* win32gui and win32com allow a 'logger' object to be set, so unhandled 
  exceptions are reported to it instead of to stderr.
* win32trace module and permon data modules now works in a terminal services 
  environment.
* Thanks to Enzhou Wang, the pythoncom/pywintypes .h and .lib files
  are now installed.
* Add win32api.GetComputerNameEx() and win32api.GetComputerObjectName()
* ActiveDirectory interfaces get an upgrade and new samples.
* Fix a couple of potential buffer overflows for huge input strings.
* Fix a crash in the dbi/odbc modules.
* Pythonwin debugger should be less inclined to fill the registry with
  garbage.
* source distribution should now be complete.
* setup_win32all.py now should build correctly for most people.
* Fix more installation errors.

And lots of other bug fixes and enhancements too numerous to list here!

Build 202
---------
* Installation now works on "non-admin" installs of Python, and also
  on Windows 9x.
* Include taskscheduler and shell demos.
* New win32inet module, which provides an interface to the Microsoft
  Internet related "wininet" API.
* Many more security related functions by Roger Upole.
* New module that interfaces to Microsoft Index Server.
* Fix a bug that could cause large COM safe-arrays to crash
* Fix a number of memory leaks in COM
* shell.SHBrowseForFolder() now supports the callback param, ShellExecuteEx
  added, and a number of other shell module enhancements.
* win32trace should not lose as much data when huge amounts are being spewed.
* Add support for sorting listview controls with a sort callback.
* A number of new win32gui methods
* win32rc_parser handles icons and bitmaps etc, and also MSVC7 .rc files.
* objects from the standard 'datetime' module can be used whenever a win32 
  time object is needed.
* Work better when frozen with py2exe.
* Add win32file.FindFilesIterator(), which creates an iterator based
  around FindFirstFile/FindNextFile.  Useful for huge directories.
* Fix a number of bugs relating to large integers.
* win32api.GetFullPathName() will use GetFullPathNameW, and return a Unicode 
  object if passed a Unicode arg.
