# This is the user keyboard configuration file (user.cfg) for Pythonwin - for
# personal adaptations and extensions (via Python functions right here in
# this file). To be active, "user" keyboard has to be selected from the
# Pythonwin View/Options/Editor dialog. user.cfg inherits from and overrides
# default configuration settings in default.cfg, which is link here:

[General]
Based On = default

# The format of this file is very similar to a Windows INI file. Sections
# are identified with [Section] lines, but comments use the standard Python
# # character.  Depending on the section, lines may not be in the standard
# "key=value" format. You can reload and activate changes after editing this
# file by pressing Alt+Shift+R (-> ReloadConfig() defined in default.cfg),
# or by Menu/View/Options + pressing OK.

[Keys]
# Global Keys

Ctrl+Alt+H        = HelloWorldFunc
Ctrl+Shift+F1     = HelpDjango
Ctrl+K            = InteractSelectedLines  # alt. for Ctrl+Enter
Ctrl+E            = ExecSelectedLines
(                 = ParenOpen
)                 = ParenClose
{                 = CurlyOpen
}                 = CurlyClose
 [                = SqOpen    # (parse error w/o space at line start)
 ]                = SqClose

[Keys:Interactive]
# Key bindings specific to the interactive window.
##Alt+Enter             = MyEnterKey

# Events of the format <<event-name>> are events defined in IDLE extensions.
Alt+P             = <<history-previous>>
Alt+N             = <<history-next>>

[Keys:Editor]
# Key bindings specific to the editor

[IDLE Extensions]
# List of further IDLE extensions to load.

[Extensions]
# Python event handlers specific to this config file. Namespace (with
# pre-defined functions) is inherited from the (Based On) config file
# default.cfg

# All functions not starting with an "_" are assumed
# to be events, and take 2 params:
# * editor_window is the same object passed to IDLE
#   extensions.  editor_window.text is a text widget
#   that conforms to the Tk text widget interface.
# * event is the event being fired.  Will always be None
#   in the current implementation.
# Simply by defining these functions, they are available as
# events.
# Note that we bind keystrokes to these events in the various
# [Keys] sections.

def HelloWorldFunc(editor_window, event):  # Ctrl+Alt+H
    ##import pywin.debugger; pywin.debugger.set_trace()
    # Note: To debug this you may also set a normal break point here (F9) and
    # activate freetrace-debugging via Shift+F5.
    import win32api
    msg = "Hello World from user.cfg module %s (%s)\neditor_window=%s\nevent=%s" % (
        __name__, __file__, editor_window, event)
    win32api.MessageBox(0, msg, "user.cfg")

def ParenClose(editor_window=None, event=-1, ch=')'):
    tk = editor_window.text
    next = tk.get('insert', 'insert+1c')
    if next == ch:
        tk.delete('insert', 'insert+1c')
    return 1    # propagate
def ParenOpen(editor_window=None, event=-1, ch=')'):
    tk = editor_window.text
    next = tk.get('insert', 'insert+1c')
    if next in ' \t\n;,.+-*/%&|^<>([{}])':
        tk.insert('insert', ch)
        tk.mark_set('insert', 'insert-1c')
    if ch == ')':
        # propagate for call tips - like default.cfg
        return editor_window.edit.bindings.fire('<<paren-open>>')
    return 1
def CurlyOpen(editor_window, event):  # { key
    return ParenOpen(editor_window, ch='}')
def SqOpen(editor_window, event):  # [ key
     return ParenOpen(editor_window, ch=']')
def ParenClose(editor_window=None, event=-1, ch=')'):
    tk = editor_window.text
    next = tk.get('insert', 'insert+1c')
    if next == ch:
        tk.delete('insert', 'insert+1c')
    return 1    # propagate
def CurlyClose(editor_window, event):  # { key
    return ParenClose(editor_window, ch='}')
def SqClose(editor_window, event):  # [ key
    return ParenClose(editor_window, ch=']')

def HelpDjango(editor_window, event):  # Ctrl+Shift+F1
    # CtxHelp is inherited from default.cfg
    word = CtxHelp(editor_window, hf_url=(
        # registry_CHM_help_name (None->'HelpDjango'), CHM_index_template, URL_template
        None, '%s', 'https://docs.djangoproject.com/en/3.0/search/?q=%s'))
