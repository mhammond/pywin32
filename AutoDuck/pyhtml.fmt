[token]
.output=html,htm
.token=^p,<P>
.token=^t,&#09;
.token=\,\\
.token=<,&lt;
.token=>,&gt;
.highcharmask=&#%d;
;
; example-specific character tokens
.context=example
.token=^p,

[extension]

; Filename extension types
; .ext=<extension_text>, c|asm|bas

.ext=c,c
.ext=cpp,c
.ext=cxx,c
.ext=d,c
.ext=h,c
.ext=hpp,c

[constant]

; String constants
; .output=doc|html|html
; .define=<constant_name>, <constant_text>

.output=html
.define=MARK_HAMMOND,Mark Hammond (mhammond@skippinet.com.au)
.define=title,Help
.define=doc_header,Autoduck Output
.define=cb,<B>
.define=cbe,</B>
.define=ci,<I>
.define=cie,</I>
.define=cul,
.define=cule,
.define=culd,{\uldb
.define=culde,}
.define=par,<P>
.define=line,<BR>
.define=page,<HR>
.define=tab,&#09;
.define=plain,
.define=clink,{link}
.define=clinkte,{link end}
.define=heading_4,<H4>
.define=heading_3,<H3>
.define=heading_2,<H2>
.define=heading_1,<H1>
.define=heading_4e,</H4>
.define=heading_3e,</H3>
.define=heading_2e,</H2>
.define=heading_1e,</H1>
.define=normal,
.define=table_text,
.define=ex,<PRE>
.define=exe,</PRE>
.define=header_rule,<HR>
.define=rh1,<H1>
.define=rmh,<H3>
.define=rmhe,</H3>
.define=term1,<DT>
.define=term2,<DT>
.define=term3,<DT>
.define=def1,<DD>
.define=def2,<DD>
.define=def3,<DD>
.define=deflist,<DL>
.define=deflist_e,</DL>
.define=rule,<HR>
.define=indexlink,
.define=node_b0,<Object type="application/x-oleobject" classid="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e"><param name="New HTML file" value="
.define=node_b1,"><param name="New HTML title" value="
.define=node_e,"></OBJECT>

[file]
; ********************************************
; Help file headers
; ********************************************
.output=html
.pre=<HTML>

<HEAD>

<TITLE>$(title)</TITLE>

<META NAME="GENERATOR" CONTENT="Autoduck, by erica@microsoft.com">
</HEAD>

<BODY>
<H1>$(title)</H1>
<P>
<H2>Important Release Notes</H2>
<!--index:eximportant-->

<H2>External Resources</H2>
<!--index:exlinks-->
<P>
<!-- <LI><A HREF="overviews.html">Overviews</A> -->
<H2>Python Objects</H2>
<LI><A HREF="modules.html">Modules</A>
<LI><A HREF="objects.html">Objects</A>
<!--
<LI><A HREF="objectmodmethods.html">Object and Module Methods</A>
<LI><A HREF="objectmodprops.html">Object and Module Properties</A>
<LI><A HREF="classesandcmember.html">Classes and class members</A>
<LI><A HREF="functions.html">Functions</A>
<LI><A HREF="messages.html">Messages</A>
<LI><A HREF="structsnenum.html">Structs and Enums</A>
-->
<H2>Overviews and other documentation</H2>
$[index:topic]<!--index:extopics-->
<LI><A HREF="constants.html">Constants</A>

<p>Help file built: $!d</p>

$(node_b0)overviews.html$(node_b1)Overviews$(node_e)
<H2>Overviews</H2>
$[index:topic]
<!--index:extopics-->
$(node_b0)modules.html$(node_b1)Modules$(node_e)
<H1>Modules</H1>
$[index:module]

$(node_b0)objects.html$(node_b1)Objects$(node_e)
<H1>Objects</H1>
$[index:pyobject,object]

$(node_b0)objectmodmethods.html$(node_b1)Objects and Module Methods$(node_e)
<H1>Object and Module Methods</H1>
$[index:method,pymethod,pyvirtual]

$(node_b0)objectmodprops.html$(node_b1)Objects and Module Properties$(node_e)
<H1>Object and Module Properties</H1>
$[index:property]

$(node_b0)classesandcmember.html$(node_b1)Classes and class members$(node_e)
<H1>Classes and class members</H1>
$[index:class,mfunc,mdata]

$(node_b0)functions.html$(node_b1)Functions$(node_e)
<H1>Functions</H1>
$[index:function,cb]

$(node_b0)Messages.html$(node_b1)Messages$(node_e)
<H1>Messages</H1>
$[index:msg]

$(node_b0)structsnenum.html$(node_b1)Structures and Enums$(node_e)
<H1>Structures and enumerations</H1>
$[index:struct,enum]

$(node_b0)constants.html$(node_b1)Constants$(node_e)
<H1>Constants</H1>
$[index:const]

.post=</BODY>

</HTML>


[topic]
;
; ***********************************************************
; Overview Topics
; ***********************************************************

.tag=topic, html, 2, 5, $1
.pre=$(node_b0)$!c.html$(node_b1)$!n$(node_e)
$(page)$(heading_1)$!n$(heading_1e)
$2$(par)

;
; ***********************************************************
; Contents topics
; ***********************************************************

.tag=contents1, html, 2, 0, __aaa$1
.pre=$(heading_1)<A NAME=$!c>$1</A>$(heading_1e)$(par)
$(indexlink)$2$(par)

.tag=contents2, html, 2, 0, _aaa$1
.pre=$(page)$(heading_1)<A NAME=$!c>$1</A>$(heading_1e)$(par)
$(indexlink)$2$(par)

.tag=module, html, 2, 20, $1
.pre=$(node_b0)$!c.html$(node_b1)$1$(node_e)
$(heading_1)Module $1$(heading_1e)$(par)
$2$(par)

.tag=object, html, 2, 20, $1
.pre=$(node_b0)$!c.html$(node_b1)$1$(node_e)
$(page)$(heading_1)$1 Object$(heading_1e)$(par)
$(normal)$2$(par)

.tag=pymethod, html, 4, 1, $2.$3
.context=$2__$3_meth
.order=pyparm pyparmalt1 pyparmalt2 pyparmalt3 rvalue comm ex xref pyseemfc pyseeapi pyundocmfc
.pre=$(node_b0)$!c.html$(node_b1)$2.$3$(node_e)
$(heading_1)<A HREF="#2.html">$2</A>.$3$(heading_1e)$(par)
$[pymethod]$4$(par)

.tag=pyvirtual, html, 4, 1, $2.$3
.context=$2__$3_virtual
.order=pyparm pyparmalt1 pyparmalt2 pyparmalt3 rvalue comm ex xref pyseemfc pyseeapi pyundocmfc
.pre=$(node_b0)$!c.html$(node_b1)$2.$3$(node_e)
$(heading_1)<A HREF="#2.html">$2.$3</A> Virtual$(heading_1e)$(par)
$[pyvirtual]$4$(par)

; Constants
.tag=const, html, 3, 30, $2
.context=$1_$2
.parsesource=constant
.pre=$(node_b0)$!c.html$(node_b1)$2$(node_e)
$(page)
<H1>$!n</H1>
$(cb)const $1.$2;$(cbe)$(par)
$3$(par)

.tag=property, html, 4, 20, $2.$3
.context=$2__$3_prop
.order=rdesc comm ex
.pre=$(node_b0)$!c.html$(node_b1)$2.$3$(node_e)
$(page)
<H1>$!n property</H1>
$(rmh)Data Type$(rmhe)
$(cb)$1$(cbe)$(par)
$(rmh)Description$(rmhe)
$4$(par)
Defined in: $!P$(par)

; C++ methods
.tag=method, html, 4, 20, $2::$3
.context=$2__$3_meth
.order=rvalue rdesc parm comm ex
.pre=$(node_b0)$!c.html$(node_b1)$2::$3$(node_e)
$(page)
<H1>$!n method</H1>
$[method]
$4$(par)
Defined in: $!P$(par)


; ***********************************************************************
; Paragraph section
; ***********************************************************************

[paragraph]
; Parameters
.tag=pymeth, html, 2, 2
.pre=$(rmh)Methods$(rmhe)$(par)$(deflist)
.format=$(term1)<A HREF="#object.1__#1_meth.html">$1</A>$(line)
$(def1)$2&nbsp;$(par)
.if=exists($object.1)
.post=$(deflist_e)

.tag=pyclass, html, 2, 2
.pre=$(rmh)Classes$(rmhe)$(par)$(deflist)
.format=$(term1)<A HREF="#module.1.#1.html">$1</A>$(line)
$(def1)$2&nbsp;$(par)
.post=$(deflist_e)
.if=exists($module.1)

.tag=pymeth, html, 2, 2
.pre=$(rmh)Methods$(rmhe)$(par)$(deflist)
.format=$(term1)<A HREF="#module.1__#1_meth.html">$1</A>$(line)
$(def1)$2&nbsp;$(par)
.post=$(deflist_e)
.if=exists($module.1)

; Parameters
.tag=pymethod, html, 4, 1
.format=$(term1)$(ci)$1 $2::$3$(cie)$(par)
$(def1)$2 $4$(par)

; *** Properties ***

;link type and name, if type is an interface

.tag=prop, html, 3, 1
.map=property,$1,$t.1,$2,$3
.parsesource=method
.pre=$(rmh)Properties$(rmhe)
<DL>

.post=</DL>

.format=$(term1)<A HREF="#1_int.html">$1</A> <A HREF="#interface.1__#2_prop.html">$2</A>
$(def1)$3$(par)

.if=tagexists(interface),exists($1_int),exists($interface.1::$2_prop)

;link type and name

.tag=prop, html, 3, 1
.parsesource=method
.pre=$(rmh)Properties$(rmhe)
<DL>

.post=</DL>

.format=$(term1)<A HREF="#1.html">$1</A> <A HREF="#interface.1__#2_prop.html">$2</A>
$(def1)$3$(par)

.if=exists($1),exists($interface.1::$2_prop)

;link name only

.tag=prop, html, 3, 1
.parsesource=method
.pre=$(rmh)Properties$(rmhe)
<DL>

.post=</DL>

.format=$(term1)$(cb)$1$(cbe) <A HREF="#interface.1__#2_prop.html">$2</A>
$(def1)$3$(par)

.if=exists($interface.1::$2_prop)

; link type only, if type is an interface

.tag=prop, html, 3, 1
.parsesource=method
.pre=$(rmh)Properties$(rmhe)
<DL>

.post=</DL>

.format=$(term1)<A HREF="#1_int.html">$1</A> $(cb)$2$(cbe)
$(def1)$3$(par)

.if=exists($1_int)

; link type only

.tag=prop, html, 3, 1
.parsesource=method
.pre=$(rmh)Properties$(rmhe)
<DL>

.post=</DL>

.format=$(term1)<A HREF="#1.html">$1</A> $(cb)$2$(cbe)
$(def1)$3$(par)

.if=exists($1)

; link neither, or doc

.tag=prop, html, 3, 1
.parsesource=method
.map=property,$1,$t.1,$2,$3
.pre=$(rmh)Properties$(rmhe)
<DL>

.post=</DL>

.format=$(term1)$(cb)$1 $2$(cbe)
$(def1)$3$(par)


; Base C++ classes
.tag=base, html, 2, 1
.pre=$(rmh)Based On$(rmhe)
.format=<A HREF="#2_int.html">$2</A>$(par)
.if=exists($2_int), tagexists(interface)


; Bases for COM interfaces and objects
.tag=base, html, 2, 1
.pre=$(rmh)Based On$(rmhe)
.format=<A HREF="#2.html">$2</A>
.if=tagexists(object)


; Return value
.tag=rvalue, html, 2, 1
.pre=<TABLE>
<TR><TD><B>Return Value</B></TD><TD><B>Description</B></TD></TR>
.format=<TR><TD>$1</TD><TD>$2</TD></TR>
.post=</TABLE>

; Return description
.tag=rdesc, html, 1, 1
.pre=$(rmh)Return Value$(rmhe)
.format=$1$(par)


; tuple item
; @tupleitem tuple_index|name|type|description
.tag=tupleitem, html, 4, 1
.pre=$(rmh)Items$(rmhe)$(par)
.format=$(deflist)$(term1)[$1] $(ci)$2$(cie) : $3$(par)
$(def1)$4$(par)$(deflist_e)

; flags
.tag=flagh, html, 2, 2
.format=$(par)<TABLE COLS=2 WIDTH="100%" CELLSPACING=15>
<TR>
   <TD>
       $(cb)$1$(cbe)
   </TD>
   <TD>
       $(cb)$2$(cbe)
   </TD>
</TR>
<TR><TD><HR></TD><TD><HR></TD></TR>

.tag=flag, html, 2, 2
.post=</TABLE>
.format=<TR><TD>$1</TD><TD>$2</TD></TR>

; Parameters
.tag=pyvirtual, html, 4, 1
.format=$(term1)$(ci)$1 $2::$3$(cie)$(par)
$(def1)$2 $4$(par)

.tag=pyparm, html, 4, 1
.pre=$(rmh)Parameters$(rmhe)$(par)
.format=$(term1)$(ci)$2$(cie) : $1$(par)
$(def1)$4$(par)
.if=fieldempty(3)

.tag=pyparm, html, 4, 1
.pre=$(rmh)Parameters$(rmhe)$(par)
.format=$(term1)$(ci)$2=$3$(cie) : $1$(par)
$(def1)$4$(par)

.tag=pyparmalt1, html, 4, 1
.pre=$(rmh)Alternative Parameters$(rmhe)$(par)
.format=$(term1)$(ci)$2=$3$(cie)$(par)
$(def1)$4$(par)
.if=exists($3)

.tag=pyparmalt1, html, 4, 1
.pre=$(rmh)Alternative Parameters$(rmhe)$(par)
.format=$(term1)$(ci)$2$(cie)$(par)
$(def1)$4$(par)

.tag=pyparmalt2, html, 4, 1
.pre=$(rmh)Alternative Parameters$(rmhe)$(par)
.format=$(term1)$(ci)$2=$3$(cie)$(par)
$(def1)$4$(par)
.if=exists($3)

.tag=pyparmalt2, html, 4, 1
.pre=$(rmh)Alternative Parameters$(rmhe)$(par)
.format=$(term1)$(ci)$2$(cie)$(par)
$(def1)$4$(par)

.tag=pyparmalt3, html, 4, 1
.pre=$(rmh)Alternative Parameters$(rmhe)$(par)
.format=$(term1)$(ci)$2=$3$(cie)$(par)
$(def1)$4$(par)
.if=exists($3)

.tag=pyparmalt3, html, 4, 1
.pre=$(rmh)Alternative Parameters$(rmhe)$(par)
.format=$(term1)$(ci)$2$(cie)$(par)
$(def1)$4$(par)

.tag=pyseemfc, html, 2, 1
.pre=$(rmh)MFC References$(rmhe)$(par)
.format=$(term1)$1::$2$(par)

.tag=pyseeapi, html, 1, 1
.pre=$(rmh)Win32 API References$(rmhe)$(par)
.format=$(term1)Search for <i>$1</i> at <a href="http://search.msdn.microsoft.com/search/results.aspx?view=msdn&query=$1" target="_blank">msdn</a>, <a href="http://www.google.com/search?q=$1" target="_blank">google</a> or <a href="http://groups.google.com/groups?q=$1" target="_blank">google groups</a>.$(par)

.tag=pyundocmfc, html, 2, 1
.pre=$(rmh)Undocumented MFC References$(par)
.format=$(term1)$1::$2$(par)

.tag=xref, html, 1, 1
.pre=$(rmh)See Also$(rmhe)$(par)
.format=$(term1)$1$(par)

;Properties
;link type and name

.tag=prop, html, 3, 1
.pre=$(rmh)Properties$(rmhe)$(par)
.format=$(term1)<BR/><B>Properties</B><BR/><A HREF="#object.1__#2_prop.html">$1</A>$(par)
$(def1)$3$(par)
.if=exists($1),exists($object.1::$2_prop)

;link name only

.tag=prop, html, 3, 1
.pre=$(rmh)Properties$(rmhe)$(par)
.format=$(term1)$(cb)$1$(cbe)<A HREF="#object.1__#2_prop.html">$(par)
$(def1)$3$(par)
.if=exists($object.1::$2_prop)

; link type only

.tag=prop, html, 3, 1
.pre=$(rmh)Properties$(rmhe)$(par)
.format=$(term1)<A HREF="#1.html">$1</A>$(cb)$2$(cbe)$(par)
$(def1)$3$(par)
.if=exists($1)

;
; ***********************************************************
; Misc Tags
; ***********************************************************

.tag=comm, html, 1, 1
.pre=$(rmh)Comments$(rmhe)

.format=$1$(par)

.tag=xref, html, 1, 1
.pre=$(rmh)See Also$(rmhe)
.format=$1$(par)

.tag=ex, html, 2, 1, 1
.pre=$(rmh)Example$(rmhe)
.format=$1$(par)
$(ex)$2
$(exe)

.tag=iex, html, 1, 8, 1
.pre=$(ex)
.format=$1$(par)

.post=$(exe)

.tag=devnote, html, 1, 1
.pre=$(rmh)<font color=##c71a1d>Developer Notes</font>$(rmhe)
.format=<font color=##c71a1d> $1</font>$(par)

.tag=todo, html, 1, 1
.pre=$(rmh)<font color=##c71a1d> To Do</font>$(rmhe)
.format=<font color=##c71a1d> $1</font>$(par)

.tag=syntax, html, 1, 1
.pre=$(rmh)Syntax$(rmhe)
.format=$1$(par)

; ******************************************
; Miscellaneous tags
; ******************************************

.tag=normal,html,1,1
.format=$1$(par)

.tag=head1, html, 2, 1
.if=fieldempty(2)
.format=$(heading_1)$1$(heading_1e)$(par)

.tag=head2, html, 2, 1
.if=fieldempty(2)
.format=$(heading_2)$1$(heading_2e)$(par)

.tag=head3, html, 2, 1
.if=fieldempty(2)
.format=$(heading_3)$1$(heading_3e)$(par)

.tag=group, html, 1, 8
.format=$(heading_3)$1$(heading_3e)$(par)

.tag=end, html, 0, 8
.format=

; ******************************************
; Index tags
; ******************************************

.tag=index, html, 2, 1
.pre=<MENU COMPACT>

.format=$[index:$1:$2]$(par)
.post=</MENU>

.tag=subindex,html,1,1
.format=$(indexlink)<A HREF=#_aaa#1>$1</A>$(par)

[text]
; Object
.tag=o, html, 1
.format=$(cb)$1$(cbe)
.if=$1=$abstract.1$object.1

.tag=o, html, 1
.format=<A HREF="#1.html">$1</A>
.if=exists($1)

.tag=o, html, 1
.format=$(cb)$1$(cbe)

;
; ******************************************
; Classes
; ******************************************

.tag=c, html, 1
.format=$(cb)$1$(cbe)
.if=$1=$class.1
.tag=c, html, 1
.format=<A HREF="$1.html">$1</A>
.if=exists($1)
.tag=c, html, 1
.format=$(cb)$1$(cbe)


;
; ******************************************
; OLE Methods
; ******************************************

; circular reference, make bold
; example: <om .Bar> appearing in @method ret|IFoo|Bar

.tag=om, html, 2
.format=$(cb)$2$(cbe)
.if=tagexists(method),fieldempty(1),$2=$method.3
.if=$1=$method.2,$2=$method.3

; @abstract or @object tag, empty field, link
; example: <om .Bar> appearing in @abstract Foo or @object Foo

.tag=om, html, 2
.format=<A HREF="I$abstract.1$object.1__$2_meth.html">$2</A>
.if=tagexists(object),fieldempty(1),exists(I$object.1__$2_meth)
.if=tagexists(abstract),fieldempty(1),exists(I$abstract.1__$2_meth)

; @method, @interface, @property, @event, empty field, link
; example: <om .Bar> appearing in @interface IFoo

.tag=om, html, 2
.format=<A HREF="$method.2$property.2$interface.1$event.1__$2_meth.html">$2</A>
.if=fieldempty(1),exists($method.2$property.2$interface.1$event.1__$2_meth)

; @object, @abstract, same object, link
; example: <om IFoo.Bar> appearing in @object Foo

.tag=om, html, 2
.format=<A HREF="I$object.1$abstract.1__$2_meth.html">$2</A>
.if=tagexists(object),$1=I$object.1,exists(I$object.1__$2_meth)
.if=tagexists(abstract),$1=I$abstract.1,exists(I$abstract.1__$2_meth)

; @method, @interface, @property, @event, same interface, link
; example: <om IFoo.Bar> appearing in @method ret|IFoo|Bar

.tag=om, html, 2
.format=<A HREF="$method.2$property.2$interface.1$event.1__$2_meth.html">$2</A>
.if=$1=$method.2$property.2$interface.1$event.1,exists($method.2$property.2$interface.1$event.1__$2_meth)

; different interface, link
; example: <om IFoo.Bar> appearing in @method ret|IBar|Foo

.tag=om, html, 2
.format=<A HREF="#1__#2_meth.html">$1::$2</A>
.if=exists($1__$2_meth)

; same interface, no link
; example: <om IFoo.Bar> appearing in @method ret|IBar|Foo but no
;               IFoo::Bar defined

.tag=om, html, 2
.format=$(cb)$2$(cbe)
.if=tagexists(object),$1=I$object.1
.if=tagexists(abstract),$1=I$abstract.1
.if=$1=$method.2$property.2$interface.1$event.1
.if=fieldempty(1)

; default: html fields,
; example: <om IFoo.Bar> output with "IFoo.Bar" in bold
.tag=om, html, 2
.format=$(cb)$1::$2$(cbe)


; Reference to a virtual
.tag=vm, html, 2
.format=<A HREF="#1__#2_virtual.html">$1.$2</A> virtual method
.if=exists($1__$2_virtual)

; circular reference, make bold
;
.tag=mf, html, 2
.format=$(cb)$2$(cbe)
.if=fieldempty(1),$2=$mfunc.3
.if=$1=$mfunc.2,$2=$mfunc.3

; same class, different function, link target exists: omit class name & link
;
.tag=mf, html, 2
.format=<A HREF="$class.1$mfunc.2$mdata.2__$2.html">$2</A>
.if=fieldempty(1),exists($class.1$mfunc.2$mdata.2::$2)
.if=exists($1::$2),$1=$class.1$mfunc.2$mdata.2

; different class, link target exists: output class::function & link
;
.tag=mf, html, 2
.format=<A HREF="$1__$2.html">$1::$2</A>
.if=exists($1::$2)

; same class, no link target: omit class name & bold
;
.tag=mf, html, 2
.format=$(cb)$2$(cbe)
.if=fieldempty(1)
.if=$1=$class.1$mfunc.2$mdata.2

; nothing to link to, within different class
;
.tag=mf, html, 2
.format=$(cb)$1::$2$(cbe)


.tag=cp, html, 0
.format=\'a9
.tag=tm, html, 0
.format=\'99
.tag=rtm, html, 0
.format=\'ae
.tag=en-, html, 0
.format=\'97
.tag=em-, html, 0
.format=\'96
.tag=lq, html, 0
.format=\'91
.tag=rq, html, 0
.format=\'92
.tag=gt, html, 0
.format=>
.tag=lt, html, 0
.format=<
.tag=tab, html, 0
.format=$(tab)
.tag=nl, html, 0
.format=$(line)
.tag=cmt, html, 0
.format=//
;
; ******************************************
; Build elements
; ******************************************
.tag=date,html,0
.format=$!d
.tag=filename,html,0
.format=$!F
.tag=filepath,html,0
.format=$!P
.tag=tname,html,0
.format=$!n
.tag=tcontext,html,0
.format=$!c

;
; ******************************************
; Graphics
; ******************************************
.tag=bmp, html, 1
.format=$(bitmap)$1$(bitmape)
.tag=f, html, 1
.format=$(cb)$1$(cbe)
.if=$1=$func.2

.tag=f, html, 1
.format=<A HREF="#1.html">$1</A>
.if=exists($1)

.tag=f, html, 1
.format=$(cb)$1$(cbe)

; ******************************************
; Parameters
; ******************************************

.tag=p, html, 1
.format=$(ci)$1$(cie)

; ******************************************
; Misc weirdness
; ******************************************
.tag=index, html, 2
.format=$[index:$1:$2]

.tag=y, html, 1
.format=$(ci)$1$(cie)

.tag=l, html, 1
.format=$1
.if=$1=$topic.1

.tag=l, html, 1
.format=<A HREF="#1.html">$1</A>

; ******************************************
; Structures
; ******************************************

.tag=t, html, 1
.format=$(cb)$1$(cbe)
.if=$1=$struct.1

.tag=t, html, 1
.format=$(cb)$1$(cbe)
.if=$1=$enum.1

.tag=t, html, 1
.format=<A HREF="#1.html">$1</A>
.if=exists($1)

.tag=t, html, 1
.format=$(cb)$1$(cbe)

[diagram]

;OLE method

.tag=method, html, parm
.cancelifpresent=syntax
.pre= $(cb)$1 $3($(cbe)
.post=$(cb))$(cbe)$(par)
.formatfirst=$(cb)$1$(cbe) $(ci)$2$(cie)
.format=$(cb), $1$(cbe) $(ci)$2$(cie)

; **** Python Method ********
.tag=pymethod, html, pyparm
.pre=$(cb)$3(
.post=$(cbe))$(par)
.formatfirst=$(ci)$2$(cie)
.format=$(ci), $2$(cie)
.if=fieldempty(1)

.tag=pymethod, html, pyparm
.pre=$1 = $(cb)$3(
.post=$(cbe))$(par)
.formatfirst=$(ci)$2$(cie)
.format=$(ci), $2$(cie)

.tag=pyvirtual, html, pyparm
.pre=$(cb)$3(
.post=$(cbe))$(par)
.formatfirst=$(ci)$2$(cie)
.format=$(ci), $2$(cie)


[index]
.output=html
.format=<LI><A HREF="$!c.html">$!n</A>
